import TelegramBot from 'node-telegram-bot-api';
import { Low } from 'lowdb';
import { JSONFile } from 'lowdb/node';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { mkdirSync, existsSync } from 'fs';
import crypto from 'crypto';

dotenv.config();

const __dirname = dirname(fileURLToPath(import.meta.url));
const dbDir = join(__dirname, '..', 'data');
const dbFile = join(dbDir, 'db.json');

if (!existsSync(dbDir)) {
  mkdirSync(dbDir, { recursive: true });
}

const defaultData = {
  users: [],
  verifiedUsers: [],
  cart: {},
  orders: [],
  userStates: {},
  products: {
    "–¢–µ–º–Ω—ã–π —É–ª—É–Ω": {
      "–î–∏–∫–æ—Ä–∞—Å—Ç—É—â–∏–π –î–∞–Ω –¶—É–Ω —Å–ª–∞–±–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞": { 
        price: 13, 
        unit: "–≥—Ä", 
        image: "", 
        description: "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–º–Ω—ã–π —É–ª—É–Ω —Å –º—è–≥–∫–∏–º –≤–∫—É—Å–æ–º",
        stock: 1000
      }
      // ... other products
    }
  }
};

const adapter = new JSONFile(dbFile);
const db = new Low(adapter, defaultData);
await db.read();

let bot;

try {
  bot = new TelegramBot(process.env.BOT_TOKEN, { 
    polling: true,
    webHook: false 
  });

  console.log('Bot successfully initialized');
} catch (error) {
  console.error('Failed to initialize bot:', error);
  process.exit(1);
}

bot.on('polling_error', (error) => {
  console.log('Polling error:', error.message);
  if (error.code === 'ETELEGRAM' && error.response.statusCode === 409) {
    console.log('Conflict detected, restarting bot...');
    process.exit(1);
  }
});

bot.on('error', (error) => {
  console.error('Bot error:', error);
});

const deliveryMethods = {
  'cdek': '–°–î–≠–ö',
  'post': '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏',
  'pyaterochka': '–ü—è—Ç—ë—Ä–æ—á–∫–∞',
  'avito': '–ê–≤–∏—Ç–æ'
};

// Handle photo messages for product images
bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  if (chatId.toString() === process.env.ADMIN_ID && db.data.userStates[userId]?.awaitingProductImage) {
    const { category, product } = db.data.userStates[userId];
    const photo = msg.photo[msg.photo.length - 1];
    
    try {
      db.data.products[category][product].image = photo.file_id;
      await db.write();
      bot.sendMessage(chatId, `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "${product}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
    } catch (error) {
      console.error('Error saving product image:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.');
    }
    
    delete db.data.userStates[userId];
    await db.write();
  }
});

const productMap = new Map();
let idCounter = 1;

function getProductId(category, product) {
  const key = `${category}:${product}`;
  if (!productMap.has(key)) {
    const id = idCounter.toString(36);
    productMap.set(key, id);
    productMap.set(id, { category, product });
    idCounter++;
  }
  return productMap.get(key);
}

function getProductFromId(id) {
  return productMap.get(id);
}

// Initialize product IDs
for (const [category, products] of Object.entries(db.data.products)) {
  for (const product of Object.keys(products)) {
    getProductId(category, product);
  }
}

const mainMenuKeyboard = {
  reply_markup: {
    keyboard: [
      ['üçµ –ö–∞—Ç–∞–ª–æ–≥', 'üõí –ö–æ—Ä–∑–∏–Ω–∞'],
      ['üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', '‚ùì –ü–æ–º–æ—â—å'],
      ['‚≠êÔ∏è –û—Ç–∑—ã–≤—ã', 'üì¢ –ù–∞—à –∫–∞–Ω–∞–ª']
    ],
    resize_keyboard: true
  }
};

const adminKeyboard = {
  reply_markup: {
    keyboard: [
      ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üì¶ –ó–∞–∫–∞–∑—ã'],
      ['üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏', 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞'],
      ['‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏']
    ],
    resize_keyboard: true
  }
};

const categoriesKeyboard = {
  reply_markup: {
    keyboard: [
      ['–¢–µ–º–Ω—ã–π —É–ª—É–Ω', '–°–≤–µ—Ç–ª—ã–π –£–ª—É–Ω'],
      ['–ë–µ–ª—ã–π —á–∞–π', '–ö—Ä–∞—Å–Ω—ã–π —á–∞–π'],
      ['–ó–µ–ª–µ–Ω—ã–π —á–∞–π', '–®–µ–Ω –ü—É—ç—Ä'],
      ['–®—É –ü—É—ç—Ä', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'],
      ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
    ],
    resize_keyboard: true
  }
};

bot.onText(/\/admin/, (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() === process.env.ADMIN_ID) {
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', adminKeyboard);
  } else {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
});

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!db.data.users.includes(userId)) {
    db.data.users.push(userId);
    await db.write();
  }
  
  const welcomeMessage = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω Chai Yun! üçµ

–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —á–∞—è –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –¥–ª—è —á–∞–π–Ω–æ–π —Ü–µ—Ä–µ–º–æ–Ω–∏–∏.

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:
`;
  
  bot.sendMessage(chatId, welcomeMessage, mainMenuKeyboard);
});

bot.on('message', async (msg) => {
  try {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;

    if (!text) return;

    // Handle order details input
    if (db.data.userStates[userId]?.awaitingOrderDetails) {
      const state = db.data.userStates[userId];
      
      switch(state.step) {
        case 'city':
          state.city = text;
          state.step = 'delivery';
          const deliveryKeyboard = {
            reply_markup: {
              inline_keyboard: Object.entries(deliveryMethods).map(([key, name]) => [{
                text: name,
                callback_data: `d:${key}`
              }])
            }
          };
          bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryKeyboard);
          break;
          
        case 'name':
          state.name = text;
          state.step = 'phone';
          bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
          break;
          
        case 'phone':
          state.phone = text;
          await createOrder(chatId, state);
          break;
      }
      
      await db.write();
      return;
    }

    // Handle custom amount input
    if (db.data.userStates[userId]?.awaitingAmount) {
      const amount = parseInt(text);
      const productId = db.data.userStates[userId].productId;
      const productInfo = getProductFromId(productId);
      const product = db.data.products[productInfo.category][productInfo.product];

      if (!isNaN(amount) && amount > 0) {
        if (amount > product.stock) {
          bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${product.stock} ${product.unit}`);
        } else if (product.unit === '–≥—Ä' && amount < 20) {
          bot.sendMessage(chatId, '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - 20 –≥—Ä–∞–º–º');
        } else {
          addToCart(chatId, productInfo.category, productInfo.product, amount);
        }
      } else {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
      }

      delete db.data.userStates[userId];
      await db.write();
      return;
    }

    // Handle stock update input
    if (db.data.userStates[userId]?.awaitingStock) {
      if (chatId.toString() === process.env.ADMIN_ID) {
        const stock = parseInt(text);
        if (!isNaN(stock) && stock >= 0) {
          const { category, product } = db.data.userStates[userId];
          db.data.products[category][product].stock = stock;
          await db.write();
          bot.sendMessage(chatId, `–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ "${product}" –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${stock} ${db.data.products[category][product].unit}`);
        } else {
          bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0)');
        }
        delete db.data.userStates[userId];
        await db.write();
        return;
      }
    }

    // Handle description update input
    if (db.data.userStates[userId]?.awaitingDescription) {
      if (chatId.toString() === process.env.ADMIN_ID) {
        const { category, product } = db.data.userStates[userId];
        db.data.products[category][product].description = text;
        await db.write();
        bot.sendMessage(chatId, `–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ "${product}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`);
        delete db.data.userStates[userId];
        await db.write();
        return;
      }
    }

    // Handle broadcast message
    if (db.data.userStates[userId]?.awaitingBroadcast) {
      if (chatId.toString() === process.env.ADMIN_ID) {
        const users = db.data.users;
        let successCount = 0;
        let failCount = 0;

        for (const recipientId of users) {
          try {
            await bot.sendMessage(recipientId, text);
            successCount++;
          } catch (error) {
            console.error(`Failed to send broadcast to ${recipientId}:`, error);
            failCount++;
          }
        }

        bot.sendMessage(chatId, `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n–û—à–∏–±–æ–∫: ${failCount}`);
        delete db.data.userStates[userId];
        await db.write();
        return;
      }
    }

    // Handle price editing
    if (db.data.userStates[userId]?.awaitingPrice) {
      if (chatId.toString() === process.env.ADMIN_ID) {
        const price = parseFloat(text);
        if (!isNaN(price) && price > 0) {
          const { category, product } = db.data.userStates[userId];
          db.data.products[category][product].price = price;
          await db.write();
          bot.sendMessage(chatId, `–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ "${product}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${price} —Ä—É–±.`);
        } else {
          bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
        }
        delete db.data.userStates[userId];
        await db.write();
        return;
      }
    }

    // Handle new product name input
    if (db.data.userStates[userId]?.awaitingNewProduct) {
      if (chatId.toString() === process.env.ADMIN_ID) {
        const { category } = db.data.userStates[userId];
        const productName = text;
        
        if (!db.data.products[category][productName]) {
          db.data.products[category][productName] = {
            price: 0,
            unit: '–≥—Ä',
            image: '',
            description: '',
            stock: 0,
            allowPieces: false,
            stockPieces: 0
          };
          await db.write();
          
          const keyboard = {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–¢–æ–ª—å–∫–æ –≥—Ä–∞–º–º—ã', callback_data: `unit:${category}:${getProductId(category, productName)}:g` }],
                [{ text: '–ì—Ä–∞–º–º—ã –∏ –ø–æ—à—Ç—É—á–Ω–æ', callback_data: `unit:${category}:${getProductId(category, productName)}:both` }]
              ]
            }
          };
          
          bot.sendMessage(chatId, `–¢–æ–≤–∞—Ä "${productName}" –¥–æ–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏:`, keyboard);
        } else {
          bot.sendMessage(chatId, '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        }
        delete db.data.userStates[userId];
        await db.write();
        return;
      }
    }

    // Handle unit price input for pieces
    if (db.data.userStates[userId]?.awaitingPiecePrice) {
      if (chatId.toString() === process.env.ADMIN_ID) {
        const price = parseFloat(text);
        if (!isNaN(price) && price > 0) {
          const { category, product } = db.data.userStates[userId];
          db.data.products[category][product].pricePerPiece = price;
          await db.write();
          bot.sendMessage(chatId, `–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${price} —Ä—É–±.`);
          
          // Ask for stock in pieces
          db.data.userStates[userId] = {
            awaitingStockPieces: true,
            category,
            product
          };
          bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ –≤ –Ω–∞–ª–∏—á–∏–∏:');
        } else {
          bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
        }
        return;
      }
    }

    // Handle stock pieces input
    if (db.data.userStates[userId]?.awaitingStockPieces) {
      if (chatId.toString() === process.env.ADMIN_ID) {
        const stock = parseInt(text);
        if (!isNaN(stock) && stock >= 0) {
          const { category, product } = db.data.userStates[userId];
          db.data.products[category][product].stockPieces = stock;
          await db.write();
          bot.sendMessage(chatId, `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ –≤ –Ω–∞–ª–∏—á–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${stock}`);
        } else {
          bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >= 0)');
        }
        delete db.data.userStates[userId];
        await db.write();
        return;
      }
    }

    switch(text) {
      case '‚≠êÔ∏è –û—Ç–∑—ã–≤—ã':
        bot.sendMessage(chatId, '–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:\nhttps://t.me/chaiyunotzov');
        break;

      case 'üì¢ –ù–∞—à –∫–∞–Ω–∞–ª':
        bot.sendMessage(chatId, '–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\nhttps://t.me/ChaI_Yunn');
        break;

      case 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞':
        if (chatId.toString() === process.env.ADMIN_ID) {
          db.data.userStates[userId] = { awaitingBroadcast: true };
          await db.write();
          bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:');
        }
        break;

      case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        if (chatId.toString() === process.env.ADMIN_ID) {
          const totalOrders = db.data.orders.length;
          const newOrders = db.data.orders.filter(o => o.status === 'new').length;
          const completedOrders = db.data.orders.filter(o => o.status === 'completed').length;
          const totalUsers = db.data.users.length;
          const totalRevenue = db.data.orders
            .filter(o => o.status === 'completed')
            .reduce((sum, order) => {
              return sum + order.items.reduce((orderSum, item) => {
                return orderSum + (item.price * item.amount);
              }, 0);
            }, 0);

          const stats = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}

üì¶ –ó–∞–∫–∞–∑—ã:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${newOrders}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${completedOrders}

üí∞ –í—ã—Ä—É—á–∫–∞:
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue} —Ä—É–±.
`;
          bot.sendMessage(chatId, stats);
        }
        break;

      case 'üì¶ –ó–∞–∫–∞–∑—ã':
        if (chatId.toString() === process.env.ADMIN_ID) {
          const orders = db.data.orders.filter(o => o.status === 'new');
          if (orders.length === 0) {
            bot.sendMessage(chatId, '–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç');
          } else {
            for (const order of orders) {
              const total = order.items.reduce((sum, item) => sum + (item.price * item.amount), 0);
              const keyboard = {
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `oc:${order.id}` },
                      { text: '‚ùå –û—Ç–º–µ–Ω—ë–Ω', callback_data: `ox:${order.id}` }
                    ],
                    [{ text: 'üë§ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é', url: `tg://user?id=${order.userId}` }]
                  ]
                }
              };

              const message = `
üì¶ –ó–∞–∫–∞–∑ #${order.id}

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:
–§–ò–û: ${order.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}

üìç –î–æ—Å—Ç–∞–≤–∫–∞:
–ì–æ—Ä–æ–¥: ${order.city}
–°–ø–æ—Å–æ–±: ${deliveryMethods[order.delivery]}

üõçÔ∏è –¢–æ–≤–∞—Ä—ã:
${order.items.map(item => `‚Ä¢ ${item.name} (${item.amount} ${item.unit})`).join('\n')}

üí∞ –ò—Ç–æ–≥–æ: ${total} —Ä—É–±.
`;
              bot.sendMessage(chatId, message, keyboard);
            }
          }
        }
        break;

      case 'üè™ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏':
        if (chatId.toString() === process.env.ADMIN_ID) {
          const keyboard = {
            reply_markup: {
              inline_keyboard: [
                ...Object.keys(db.data.products).map(category => [{
                  text: category,
                  callback_data: `ac:${category}`
                }]),
                [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'new_category' }]
              ]
            }
          };
          bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏:', keyboard);
        }
        break;

      case '‚¨ÖÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏':
        if (chatId.toString() === process.env.ADMIN_ID) {
          bot.sendMessage(chatId, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', mainMenuKeyboard);
        }
        break;

      case 'üçµ –ö–∞—Ç–∞–ª–æ–≥':
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', categoriesKeyboard);
        break;
        
      case 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        showCart(chatId);
        break;
        
      case 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏':
        bot.sendMessage(chatId, '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @al9folur');
        break;
        
      case '‚ùì –ü–æ–º–æ—â—å':
        const helpText = `
–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:
1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∏–Ω–∏–º—É–º 20 –≥—Ä–∞–º–º –¥–ª—è —á–∞—è)
3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @al9folur
`;
        bot.sendMessage(chatId, helpText);
        break;

      case '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenuKeyboard);
        break;

      default:
        if (Object.keys(db.data.products).includes(text)) {
          const products = db.data.products[text];
          let message = `${text}:\n\n`;
          
          for (const [name, details] of Object.entries(products)) {
            message += `${name}\n–¶–µ–Ω–∞: ${details.price} —Ä—É–±. –∑–∞ ${details.unit}\n`;
            message += `${details.description}\n`;
            message += `–í –Ω–∞–ª–∏—á–∏–∏: ${details.stock} ${details.unit}\n\n`;
          }

          const keyboard = {
            reply_markup: {
              inline_keyboard: Object.keys(products).map(product => [{
                text: product,
                callback_data: `p:${getProductId(text, product)}`
              }])
            }
          };

          bot.sendMessage(chatId, message, keyboard);
        }
        break;
    }
  } catch (error) {
    console.error('Error in message handler:', error);
    bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.on('callback_query', async (query) => {
  try {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    if (data.startsWith('d:')) {
      const delivery = data.split(':')[1];
      const state = db.data.userStates[userId];
      if (state?.awaitingOrderDetails) {
        state.delivery = delivery;
        state.step = 'name';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:');
        await db.write();
      }
    }

    if (data.startsWith('ac:')) {
      const category = data.split(':')[1];
      const products = db.data.products[category];
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            ...Object.keys(products).map(product => [{
              text: product,
              callback_data: `ap:${category}:${getProductId(category, product)}`
            }]),
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä', callback_data: `new_product:${category}` }]
          ]
        }
      };
      bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category}":`, keyboard);
    }

    if (data.startsWith('ap:')) {
      const [_, category, productId] = data.split(':');
      const productInfo = getProductFromId(productId);
      const product = db.data.products[category][productInfo.product];
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì∑ –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `ai:${category}:${productId}` }],
            [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', callback_data: `ep:${category}:${productId}` }],
            [{ text: 'üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫', callback_data: `es:${category}:${productId}` }],
            [{ text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: `ed:${category}:${productId}` }],
            [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data: `dp:${category}:${productId}` }]
          ]
        }
      };

      if (product.allowPieces) {
        keyboard.reply_markup.inline_keyboard.splice(3, 0, [
          { text: 'üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç—É–∫–∏)', callback_data: `esp:${category}:${productId}` }
        ]);
      }

      const message = `
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º "${productInfo.product}":

–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ –¶–µ–Ω–∞: ${product.price} —Ä—É–±/${product.unit}
${product.allowPieces ? `‚Ä¢ –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: ${product.pricePerPiece} —Ä—É–±/—à—Ç\n` : ''}
‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: ${product.stock} ${product.unit}
${product.allowPieces ? `‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ —à—Ç—É–∫: ${product.stockPieces} —à—Ç\n` : ''}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${product.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
`;
      bot.sendMessage(chatId, message, keyboard);
    }

    if (data.startsWith('dp:')) {
      const [_, category, productId] = data.split(':');
      const productInfo = getProductFromId(productId);
      delete db.data.products[category][productInfo.product];
      await db.write();
      bot.sendMessage(chatId, `–¢–æ–≤–∞—Ä "${productInfo.product}" —É–¥–∞–ª–µ–Ω`);
    }

    if (data.startsWith('ai:')) {
      const [_, category, productId] = data.split(':');
      const productInfo = getProductFromId(productId);
      db.data.userStates[userId] = { 
        awaitingProductImage: true,
        category,
        product: productInfo.product
      };
      await db.write();
      bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:');
    }

    if (data.startsWith('ep:')) {
      const [_, category, productId] = data.split(':');
      const productInfo = getProductFromId(productId);
      db.data.userStates[userId] = { 
        awaitingPrice: true,
        category,
        product: productInfo.product
      };
      await db.write();
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:');
    }

    if (data.startsWith('es:')) {
      const [_, category, productId] = data.split(':');
      const productInfo = getProductFromId(productId);
      db.data.userStates[userId] = { 
        awaitingStock: true,
        category,
        product: productInfo.product
      };
      await db.write();
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ (–≤ –≥—Ä–∞–º–º–∞—Ö):');
    }

    if (data.startsWith('esp:')) {
      const [_, category, productId] = data.split(':');
      const productInfo = getProductFromId(productId);
      db.data.userStates[userId] = { 
        awaitingStockPieces: true,
        category,
        product: productInfo.product
      };
      await db.write();
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ (–≤ —à—Ç—É–∫–∞—Ö):');
    }

    if (data.startsWith('ed:')) {
      const [_, category, productId] = data.split(':');
      const productInfo = getProductFromId(productId);
      db.data.userStates[userId] = { 
        awaitingDescription: true,
        category,
        product: productInfo.product
      };
      await db.write();
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
    }

    if (data.startsWith('oc:') || data.startsWith('ox:')) {
      const [action, orderId] = data.split(':');
      const status = action === 'oc' ? 'completed' : 'cancelled';
      
      const orderIndex = db.data.orders.findIndex(o => o.id === orderId);
      if (orderIndex !== -1) {
        const order = db.data.orders[orderIndex];
        
        // Update stock for completed orders
        if (status === 'completed') {
          for (const item of order.items) {
            const product = db.data.products[item.category][item.name];
            if (item.isPiece) {
              product.stockPieces -= item.amount;
            } else {
              product.stock -= item.amount;
            }
          }
        }
        
        order.status = status;
        await db.write();
        
        const statusText = status === 'completed' ? '–≤—ã–ø–æ–ª–Ω–µ–Ω' : '–æ—Ç–º–µ–Ω—ë–Ω';
        bot.editMessageText(`–ó–∞–∫–∞–∑ ${statusText}`, {
          chat_id: chatId,
          message_id: query.message.message_id
        });
        
        // Notify customer
        bot.sendMessage(order.userId, `–í–∞—à –∑–∞–∫–∞–∑ #${order.id} –±—ã–ª ${statusText}`);
      }
    }

    if (data === 'new_category') {
      db.data.userStates[userId] = {
        awaitingNewCategory: true
      };
      await db.write();
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    }

    if (data.startsWith('new_product:')) {
      const category = data.split(':')[1];
      db.data.userStates[userId] = {
        awaitingNewProduct: true,
        category
      };
      await db.write();
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:');
    }

    if (data.startsWith('unit:')) {
      const [_, category, productId, unitType] = data.split(':');
      const productInfo = getProductFromId(productId);
      const product = db.data.products[category][productInfo.product];
      
      if (unitType === 'both') {
        product.allowPieces = true;
        await db.write();
        
        db.data.userStates[userId] = {
          awaitingPiecePrice: true,
          category,
          product: productInfo.product
        };
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —à—Ç—É–∫—É:');
      } else {
        product.allowPieces = false;
        await db.write();
        
        db.data.userStates[userId] = {
          awaitingPrice: true,
          category,
          product: productInfo.product
        };
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≥—Ä–∞–º–º:');
      }
    }

    if (data.startsWith('p:')) {
      const productId = data.split(':')[1];
      const productInfo = getProductFromId(productId);
      const product = db.data.products[productInfo.category][productInfo.product];

      let message = `
${productInfo.product}
${product.description}

`;

      if (product.allowPieces) {
        message += `–¶–µ–Ω–∞: ${product.price} —Ä—É–±/–≥—Ä –∏–ª–∏ ${product.pricePerPiece} —Ä—É–±/—à—Ç\n`;
        message += `–í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} –≥—Ä –∏ ${product.stockPieces} —à—Ç\n`;
      } else {
        message += `–¶–µ–Ω–∞: ${product.price} —Ä—É–±/${product.unit}\n`;
        message += `–í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} ${product.unit}\n`;
      }

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            product.allowPieces ? [
              { text: '20 –≥—Ä', callback_data: `a:${productId}:20:g` },
              { text: '50 –≥—Ä', callback_data: `a:${productId}:50:g` },
              { text: '100 –≥—Ä', callback_data: `a:${productId}:100:g` }
            ] : [
              { text: '20 –≥—Ä', callback_data: `a:${productId}:20` },
              { text: '50 –≥—Ä', callback_data: `a:${productId}:50` },
              { text: '100 –≥—Ä', callback_data: `a:${productId}:100` }
            ]
          ]
        }
      };

      if (product.allowPieces) {
        keyboard.reply_markup.inline_keyboard.push([
          { text: '1 —à—Ç', callback_data: `a:${productId}:1:p` },
          { text: '2 —à—Ç', callback_data: `a:${productId}:2:p` },
          { text: '5 —à—Ç', callback_data: `a:${productId}:5:p` }
        ]);
      }

      keyboard.reply_markup.inline_keyboard.push([
        { text: '–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: `c:${productId}` }
      ]);

      if (product.image) {
        await bot.sendPhoto(chatId, product.image, { caption: message, ...keyboard });
      } else {
        bot.sendMessage(chatId, message, keyboard);
      }
    }

    if (data.startsWith('a:')) {
      const parts = data.split(':');
      const productId = parts[1];
      const amount = parseInt(parts[2]);
      const unit = parts[3] || '–≥—Ä'; // Default to grams if not specified
      
      const productInfo = getProductFromId(productId);
      const product = db.data.products[productInfo.category][productInfo.product];
      
      const stock = unit === 'p' ? product.stockPieces : product.stock;
      const unitLabel = unit === 'p' ? '—à—Ç' : '–≥—Ä';
      
      if (amount > stock) {
        bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${stock} ${unitLabel}`);
      } else if (unit === '–≥' && amount < 20) {
        bot.sendMessage(chatId, '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - 20 –≥—Ä–∞–º–º');
      } else {
        addToCart(chatId, productInfo.category, productInfo.product, amount, unit === 'p');
      }
    }

    if (data === 'clear_cart') {
      db.data.cart[chatId] = [];
      await db.write();
      bot.sendMessage(chatId, '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
    }

    if (data === 'checkout') {
      if (!db.data.cart[chatId] || db.data.cart[chatId].length === 0) {
        bot.sendMessage(chatId, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
      }

      // Check stock availability before checkout
      const cart = db.data.cart[chatId];
      let stockAvailable = true;
      let unavailableItems = [];

      for (const item of cart) {
        const product = db.data.products[item.category][item.name];
        const stock = item.isPiece ? product.stockPieces : product.stock;
        if (item.amount > stock) {
          stockAvailable = false;
          unavailableItems.push(`${item.name} (–¥–æ—Å—Ç—É–ø–Ω–æ: ${stock} ${item.isPiece ? '—à—Ç' : '–≥—Ä'})`);
        }
      }

      if (!stockAvailable) {
        bot.sendMessage(chatId, `
–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ:
${unavailableItems.join('\n')}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
`);
        return;
      }

      db.data.userStates[userId] = {
        awaitingOrderDetails: true,
        step: 'city'
      };
      await db.write();

      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:');
    }

    // Answer callback query to remove loading state
    bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('Error in callback query handler:', error);
    bot.sendMessage(query.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

async function addToCart(chatId, category, productName, amount, isPiece = false) {
  if (!db.data.cart[chatId]) {
    db.data.cart[chatId] = [];
  }

  const product = db.data.products[category][productName];
  const price = isPiece ? product.pricePerPiece : product.price;
  const unit = isPiece ? '—à—Ç' : '–≥—Ä';
  
  if (amount > (isPiece ? product.stockPieces : product.stock)) {
    bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${isPiece ? product.stockPieces : product.stock} ${unit}`);
    return;
  }
  
  if (!isPiece && amount < 20 && product.unit === '–≥—Ä') {
    bot.sendMessage(chatId, '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - 20 –≥—Ä–∞–º–º');
    return;
  }

  db.data.cart[chatId].push({
    category,
    name: productName,
    price,
    amount,
    unit,
    isPiece
  });

  await db.write();
  bot.sendMessage(chatId, `–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: ${productName} (${amount} ${unit})`);
}

async function showCart(chatId) {
  const cart = db.data.cart[chatId] || [];

  if (cart.length === 0) {
    bot.sendMessage(chatId, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    return;
  }

  let message = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n';
  let total = 0;

  cart.forEach((item, index) => {
    const itemTotal = item.price * item.amount;
    total += itemTotal;
    message += `${index + 1}. ${item.name}\n${item.amount} ${item.unit} x ${item.price} —Ä—É–± = ${itemTotal} —Ä—É–±\n\n`;
  });

  message += `\n–ò—Ç–æ–≥–æ: ${total} —Ä—É–±`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'clear_cart' }],
        [{ text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' }]
      ]
    }
  };

  bot.sendMessage(chatId, message, keyboard);
}

async function createOrder(chatId, orderDetails) {
  const cart = db.data.cart[chatId] || [];
  if (cart.length === 0) return;

  // Check stock availability before creating order
  let stockAvailable = true;
  let unavailableItems = [];

  for (const item of cart) {
    const product = db.data.products[item.category][item.name];
    const stock = item.isPiece ? product.stockPieces : product.stock;
    if (item.amount > stock) {
      stockAvailable = false;
      unavailableItems.push(`${item.name} (–¥–æ—Å—Ç—É–ø–Ω–æ: ${stock} ${item.isPiece ? '—à—Ç' : '–≥—Ä'})`);
    }
  }

  if (!stockAvailable) {
    bot.sendMessage(chatId, `
–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ:
${unavailableItems.join('\n')}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
`);
    return;
  }

  const orderId = crypto.randomBytes(4).toString('hex');
  const order = {
    id: orderId,
    userId: chatId,
    items: cart,
    city: orderDetails.city,
    delivery: orderDetails.delivery,
    name: orderDetails.name,
    phone: orderDetails.phone,
    date: new Date().toISOString(),
    status: 'new'
  };
  
  db.data.orders.push(order);
  db.data.cart[chatId] = [];
  delete db.data.userStates[chatId];
  await db.write();

  const total = cart.reduce((sum, item) => sum + (item.price * item.amount), 0);
  
  bot.sendMessage(chatId, `
–ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!

üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:
–ì–æ—Ä–æ–¥: ${orderDetails.city}
–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryMethods[orderDetails.delivery]}

üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å:
–§–ò–û: ${orderDetails.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${orderDetails.phone}

üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${total} —Ä—É–±.

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
`);

  // Notify admin
  if (process.env.ADMIN_ID) {
    const adminMessage = `
üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderId}

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:
–§–ò–û: ${orderDetails.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${orderDetails.phone}

üìç –î–æ—Å—Ç–∞–≤–∫–∞:
–ì–æ—Ä–æ–¥: ${orderDetails.city}
–°–ø–æ—Å–æ–±: ${deliveryMethods[orderDetails.delivery]}

üõçÔ∏è –¢–æ–≤–∞—Ä—ã:
${cart.map(item => `‚Ä¢ ${item.name} (${item.amount} ${item.unit})`).join('\n')}

üí∞ –ò—Ç–æ–≥–æ: ${total} —Ä—É–±.
`;
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω', callback_data: `oc:${orderId}` },
            { text: '‚ùå –û—Ç–º–µ–Ω—ë–Ω', callback_data: `ox:${orderId}` }
          ],
          [{ text: 'üë§ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é', url: `tg://user?id=${chatId}` }]
        ]
      }
    };
    bot.sendMessage(process.env.ADMIN_ID, adminMessage, keyboard);
  }
}

process.on('unhandledRejection', (error) => {
  console.error('Unhandled promise rejection:', error);
});

console.log('Chai Yun Tea Shop Bot is running...');